# -*- coding: utf-8 -*-
"""
Created on Sun Sep  8 10:40:04 2019

@author: Samuel
"""


################## Problem 2 ##################


#  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.



# Fibonacci sequence is recursive 

# Function that caluclates the factorial of a natural number (including 0)
def factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)
    

# Definition to generate first n terms of the Fibonacci sequence (starting with 1,2)

def fib_numbers(n):
    x = []
    if n == 1:
        return 1    
    elif n == 2:
        return 2
    else: 
        return fib_numbers(n-1) + fib_numbers(n-2)
    x.append()
    
    
    
fib_numbers(1)

# This is slow for even fib_numbers(100)
        
i = 1    
sum = 0
while fib_numbers(i) < 4000000:
    if fib_numbers(i) % 2 == 0:
        sum +=  fib_numbers(i)
        print(sum)
    i += 1
        
        
# Another approach building fib seq within the while loop using lists


    
fib = [1,2]
x = 0
total = 2
while fib[x] < 4000000:
	x = len(fib)
	fib.append(fib[x-2] + fib[x-1])
	if fib[x] % 2 == 0:
		total += fib[x]
print(total)
    
    
    
    
    
    

